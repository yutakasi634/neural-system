微分方程式をメンバ関数にして引数としてpotentialのベクターを渡さなくてもよくする
複数種類のニューロンを実装するのにクラスの継承を使う
クラスとしての区切りをどうするか、同じ種類？ひとつのセル？一種類の変数？ひとつの変数？

ひとつのセルで考えた場合
ルンゲクッタの時間発展が面倒になるのでは
一つのセルごとに発展させる
時間発展の関数は引数として他のセルのポテンシャルすべてとdtをとる（そのセルのポテンシャルはメンバ変数なのでとってこれる）
ただ、ひとつのセルの計算の過程で他のセルの時間発展用の計算もしてしまう
全てのニューロンを引数としてとって全部一変に時間発展させる関数にするべき->すべての時間発展の関数はこの枠組みで書く。個別に時間発展させるということはしない
すべてのニューロンを纏めて関数に渡す必要がある（クラスで纏める？構造体でまとめる？クラスと構造体は実装がほぼ同じらしいのでとりあえずクラスで纏める）
Neuronクラスをメンバ変数として持つNeuronsクラスをつくればよい。こうすれば、ひとつの最下層のクラスをニューロン一つにできる（たぶん）

１：現行のNeuronsクラスをNeuronクラスにして、新にそれを束ねるNeuronsクラスを作る。今複数のニューロンを想定しているpotentialは内部変数として解釈する
	各内部変数に別の微分方程式を対応させられる仕組みをつくってまずは一ニューロンだけの系をシミュレーションすることを目指す
	完成したら試験としてローレンツアトラクタを動かしてみる
２：別の種類のニューロンに相当するクラスを作る
３：全Neuronを束ねるNeuronsクラスを作ってNeuron同士を連結する